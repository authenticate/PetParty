
<!-- Pet Party -->
<!-- Copyright 2014 - 2016 James Lammlein -->

<!-- This file is part of Pet Party. -->

<!-- Pet Party is free software: you can redistribute it and/or modify -->
<!-- it under the terms of the GNU General Public License as published by -->
<!-- the Free Software Foundation, either version 3 of the License, or -->
<!-- any later version. -->

<!-- Pet Party is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU General Public License for more details. -->

<!-- You should have received a copy of the GNU General Public License -->
<!-- along with Pet Party.  If not, see <http://www.gnu.org/licenses/>. -->

<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ../FrameXML/UI.xsd">
    
    <Script File="PetParty_PetPartyInformationFrame.lua"/>
    
    <Button name="PetParty_PetInformationButtonTemplate" motionScriptsWhileDisabled="true" virtual="true">
        <Size x="38" y="38"/>
        <Layers>
            <Layer level="BACKGROUND">
                <Texture atlas="PetList-ButtonBackground" parentKey="background"/>   
            </Layer>
            <Layer level="BORDER">
                <Texture name="$parent_Icon" parentKey="icon">
                    <Size x="38" y="38"/>
                    <Anchors>
                        <Anchor point="TOPLEFT"/>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="ARTWORK" textureSubLevel="-1">
                <Texture name="$parent_Icon_Border" parentKey="icon_border" file="Interface\Common\WhiteIconFrame" hidden="false">
                    <Anchors>
                        <Anchor point="TOPLEFT" relativePoint="TOPLEFT" relativeKey="$parent.icon"/>
                        <Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" relativeKey="$parent.icon"/>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="OVERLAY" textureSubLevel="1">
                <Texture parentKey="is_dead" file="Interface\PetBattles\DeadPetIcon" hidden="true">
                    <Size x="38" y="38"/>
                    <Anchors>
                        <Anchor point="CENTER" relativeTo="$parent_Icon" relativePoint="CENTER" x="0" y="0"/>
                    </Anchors>
                </Texture>
                <Texture name="$parent_Level_Background" atlas="PetJournal-LevelBubble" useAtlasSize="true" parentKey="level_background">
                    <Anchors>
                        <Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" relativeTo="$parent_Icon" x="3" y="-3"/>
                    </Anchors>
                </Texture>
                <FontString name="$parent_Level" inherits="GameFontNormalSmall" justifyH="CENTER" parentKey="level">
                    <Size x="0" y="12"/>
                    <Anchors>
                        <Anchor point="CENTER" relativeTo="$parent_Level_Background" x="1" y="-1"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <HighlightTexture name="$parentHighlight" file="Interface\Buttons\ButtonHilight-Square" alphaMode="ADD"/>
        <Scripts>
            <OnClick>
                local cursorType, petID = GetCursorInfo();
                if (cursorType == "battlepet") then
                    -- If this is the training pet...
                    if (PetParty.training_pet_cursor) then
                        -- Store the pet GUID.
                        PetParty.SetPetGUIDPetInformationFrame(self:GetParent().id, petID);
                        
                        -- Update the training pet frame.
                        self:GetParent():GetParent().training_pet_frame = self:GetParent();
                        
                        -- Store the pet's abilities' GUIDs.
                        local ability_guids = PetParty.GetPetAbilityGUIDsTrainingPetFrame();
                        PetParty.SetPetAbilityGUIDsPetInformationFrame(self:GetParent().id, ability_guids);
                    -- If this is an information pet...
                    elseif (PetParty.pet_information_frame_cursor ~= nil) then
                        -- Store the pet's abilities' GUIDs.
                        local ability_guids = PetParty.GetPetAbilityGUIDsPetInformationFrame(PetParty.pet_information_frame_cursor.id);
                        
                        -- Store the pet GUID.
                        PetParty.SetPetGUIDPetInformationFrame(self:GetParent().id, petID);
                        
                        -- Update the pet's abilities' GUIDs.
                        PetParty.SetPetAbilityGUIDsPetInformationFrame(self:GetParent().id, ability_guids);
                    -- If this is a pet from Blizzard's UI...
                    else
                        -- If this is the training pet frame...
                        if (PetParty_PetPartyInformationFrame.training_pet_frame == self:GetParent()) then
                            -- Clear the training pet frame.
                            PetParty_PetPartyInformationFrame.training_pet_frame = nil;
                        end
                        
                        -- Store the pet GUID.
                        PetParty.SetPetGUIDPetInformationFrame(self:GetParent().id, petID);
                        
                        -- Cache the pet GUID of the pet currently loaded in slot one.
                        local petGUID_cache, ability1_cache, ability2_cache, ability3_cache, locked_cache = C_PetJournal.GetPetLoadOutInfo(1);
                        
                        -- Load the pet into slot one.
                        C_PetJournal.SetPetLoadOutInfo(1, petID);
                        
                        -- Get the active abilities of the pet from slot one.
                        local petGUID, ability1, ability2, ability3, locked = C_PetJournal.GetPetLoadOutInfo(1);
                        
                        -- Reset slot one.
                        C_PetJournal.SetPetLoadOutInfo(1, petGUID_cache);
                        
                        -- Store the pet's abilities' GUIDs.
                        local ability_guids = { ability1, ability2, ability3 };
                        PetParty.SetPetAbilityGUIDsPetInformationFrame(self:GetParent().id, ability_guids);
                    end
                    
                    -- Update all pet frames' information.
                    for i = 0, PetParty.PETS_PER_PARTY do
                        PetParty.UpdatePetInformationPetInformationFrame(i);
                    end
                    
                    -- Reset the cursor.
                    ClearCursor();
                    
                    -- Update the flags.
                    PetParty.pet_information_frame_cursor = nil;
                    PetParty.training_pet_cursor = false;
                elseif (button == "LeftButton") and (self:GetParent().pet_guid ~= nil) then
                    -- Pick up the information pet.
                    C_PetJournal.PickupPet(self:GetParent().pet_guid);
                    
                    -- Update the flag.
                    PetParty.pet_information_frame_cursor = self:GetParent();
                end
            </OnClick>
            <OnDragStart>
                if (button == "LeftButton") and (self:GetParent().pet_guid ~= nil) then
                    -- Pick up the information pet.
                    C_PetJournal.PickupPet(self:GetParent().pet_guid);
                    
                    -- Update the flag.
                    PetParty.pet_information_frame_cursor = self:GetParent();
                end
            </OnDragStart>
            <OnLoad>
                self:RegisterForDrag("LeftButton");
                self:RegisterForClicks("LeftButtonUp", "RightButtonUp");
            </OnLoad>
        </Scripts>
    </Button>
    
    <Frame name="PetParty_PetPartyInformationFrame" parent="PetParty_MainFrame" hidden="false" enableMouse="false" movable="false" resizable="false">
        <Layers>
            <Layer level="ARTWORK">
                <FontString name="$parent_Font_String_Configuration" inherits="GameFontNormal"/>
            </Layer>
        </Layers>
        <Frames>
            <Button name="$parent_Button_Activate" inherits="OptionsButtonTemplate" hidden="false">
                <Scripts>
                    <OnClick>
                        PetParty.OnClickPetPartyInformationFrameButtonActivate();
                    </OnClick>
                    <OnEnter>
                        PetParty_Tooltip:ClearLines();
                        PetParty_Tooltip:SetOwner(self, "ANCHOR_RIGHT");
                        PetParty_Tooltip:SetBackdropColor(PetParty.TOOLTIP_BACKGROUND_R,
                                                          PetParty.TOOLTIP_BACKGROUND_G,
                                                          PetParty.TOOLTIP_BACKGROUND_B);
                        PetParty_Tooltip:AddLine(PetParty.L[PetParty.STRING_BUTTON_ACTIVATE_TOOLTIP],
                                                            PetParty.TOOLTIP_TITLE_R,
                                                            PetParty.TOOLTIP_TITLE_G,
                                                            PetParty.TOOLTIP_TITLE_B);
                        PetParty_Tooltip:Show();
                    </OnEnter>
                    <OnLeave>
                        PetParty_Tooltip:Hide();
                    </OnLeave>
                </Scripts>
            </Button>
            <Button name="$parent_Button_Save" inherits="OptionsButtonTemplate" hidden="false">
                <Scripts>
                    <OnClick>
                        PetParty.OnClickPetPartyInformationFrameButtonSave();
                    </OnClick>
                    <OnEnter>
                        PetParty_Tooltip:ClearLines();
                        PetParty_Tooltip:SetOwner(self, "ANCHOR_RIGHT");
                        PetParty_Tooltip:SetBackdropColor(PetParty.TOOLTIP_BACKGROUND_R,
                                                          PetParty.TOOLTIP_BACKGROUND_G,
                                                          PetParty.TOOLTIP_BACKGROUND_B);
                        PetParty_Tooltip:AddLine(PetParty.L[PetParty.STRING_BUTTON_SAVE_TOOLTIP],
                                                            PetParty.TOOLTIP_TITLE_R,
                                                            PetParty.TOOLTIP_TITLE_G,
                                                            PetParty.TOOLTIP_TITLE_B);
                        PetParty_Tooltip:Show();
                    </OnEnter>
                    <OnLeave>
                        PetParty_Tooltip:Hide();
                    </OnLeave>
                </Scripts>
            </Button>
        </Frames>
        <Scripts>
            <OnLoad>
                PetParty.OnLoadPetPartyInformationFrame();
            </OnLoad>
            <OnSizeChanged>
                PetParty.UpdatePetInformationFrameLayout();
            </OnSizeChanged>
        </Scripts>
    </Frame>
    
</Ui>
